
['The Lens Protocol is a Web3 social graph on the Polygon Proof-of-Stake blockchain. It is designed to empower creators to own the links between themselves and their community, forming a fully composable, user-owned social graph. The protocol is built from the ground up with modularity in mind, allowing new features and fixes to be added while ensuring immutable user-owned content and social relationships.']
['Lens Protocol seeks to solve major issues in existing social media networks. Namely, Web2 networks all read from their unique, centralized database. There is no portability. Your profile, friends, and content are locked to a specific network and owned by the network operator. This causes each network to fight a zero-sum game for your attention. ']
["Lens Protocol corrects this by being a user-owned, open social graph that any application can plug into. Since users own their data, they can bring it to any application built on top of Lens Protocol. As the true owners of their content, creators no longer need to worry about losing their content, audience, and livelihood based on the whims of an individual platform's algorithms and policies. Additionally, each application using Lens Protocol benefits the whole ecosystem, turning the zero-sum game into a collaborative one. Developers can design meaningful social experiences without needing to turn to feedback mechanisms to lock in a user's attention."]


['Publish your first post and in doing so, learn to publish whatever you like!']
["I'm sure you're used to it by now; we'll start by creating a new file called ", 'post.ts', ' in the ', 'tasks/', ' directory. ']
["We'll also include our usual imports and basic initialization. We're also going to be using the ", 'FreeCollectModule,', " which allows any follower to collect our post for free into perpetuity. Here's what the file should look like:"]
['"Following" on the Lens Protocol differs from following in Web2 social applications. When users follow a profile on the Lens Protocol, they are given a Follow NFT, which creators and communities can encode with additional value. ']
['Profiles NFTs', ' can attach a particular Follow Module to each ProfileNFT, which contains all of the logic used to determine if a user attempting to follow the profile should be issued a Follow NFT. For example, a profile could attach a follow module that requires a user to pay 5 MATIC to receive a Follow NFT. ']
["The ID of each newly issued Follow NFT for given profile increments by 1, such that the first follower's NFT has an ID of 1; the tenth has an ID of 10, and so on. "]
['Additionally, Follow NFTs have built-in governance capabilities, such as vote delegation, to allow for the creation of Social DAOs using Lens Protocol. Creators, DAOs, or other organizations can create voting strategies using Follow NFTs and their various properties--for example: "The first 1000 follows have one vote each" or "The longer you have followed, the more voting power you have."']
['We look forward to seeing all of the new Follow Modules and Follower Governance strategies the community comes up with!']

['Unpause the protocol with your custom Hardhat task!']
["The repository's ", 'hardhat.config.ts', ' is set up to import all tasks in the ', 'tasks/', " directory, which means all we've got to do to start interacting with our local deployment is create a new task."]
['Create a file ', 'unpause.ts', ' in the ', 'tasks/', " directory and open it up in your editor of choice. The first thing you'll want to do is import some modules. "]
["Since we're working with hardhat tasks, we can use the instance of ", 'ethers', " injected into the Hardhat runtime environment, we won't be needing to import it in this specific task, but it's used behind the scenes. We'll also be using ", 'typechain', ', which creates convenient typescript bindings that we can connect to our deployed contracts.']
["Below are all the imports we'll need to set the protocol state (i.e., Unpause it); we'll explain how we use each one down the line."]
["Next, we've got to create the hardhat task (which will automatically be imported in our Hardhat config file if this ", 'custom', " file exists). Our actual code to be executed will be a callback function in the tasks' ", 'setAction', ' property.']
['Get set up and hit the ground running in a matter of minutes!']
["To set things up, we're going first to clone the ", 'repository,', ' set up the environment, and finally, build and enter our Docker container!']
["As mentioned previously, you'll need Git and Docker Compose."]
['(Note: It can be blank for local development!)']
['Note:', ' This is only tested on Unix-based systems, Docker facilitates development, but users can still opt not to use it. Windows users, if running into trouble, can consider setting up the ', 'WSL', '.']
["Alright, next up, we're going to spin up our own local blockchain and deploy the entire protocol on it."]
['Create a full-fledged profile on your local Lens deployment!']
['Just like the previous step where we created a Hardhat task to unpause the protocol, we will create another task to create a profile. This allows us to publish new posts, comments, and mirrors on-chain!']
["First, let's create a new ", 'create-profile.ts', ' file in our ', 'tasks/', " directory. Then, we've only got a few things to import:"]
["Furthermore, we'll create our task and initialize our environment like so:"]
["The protocol only allows whitelisted collect modules to be used in posts and comments (mirrors don't have a collect module associated with them), so we've got to whitelist our free collect module:"]
["Now that we've whitelisted the collect module, we're ready to create our post! Like profile creation, publishing functions (in our case, we're only looking at ", 'post()', ") use an input data struct. Here's what the data struct we need looks like (from ", 'contracts/libraries/Datatypes.sol', '):']
["Now we're ready to move forward with building our input struct! We want the profile ID to be 1 since we own the only profile in existence. The content URI can be mocked. The collect module will be the newly whitelisted ", 'FreeCollectModule,', ' which takes no data, and lastly, the reference module and its associated data field are free.']
[' In production you will want to make sure the content saved for the ', 'contentURI', ' conforms to the metadata standards outlined ', 'here', '.']
["Here's how that should look:"]
["Alright, now we're just about ready to execute the transaction. Like profile creation, we'll connect the ", 'lensHub', ' instance to our ', 'user', " signer and send the transaction! To be sure, we're also going to add some logging to ensure everything works exactly how we expect it to:"]
['Create file ', 'tasks/post.ts', ' with the following code:']
["Finally, let's go ahead and run the task:"]
['If everything went according to plan, the console should output something like this:']
["Awesome! That checks out -- we've created our first profile and published our first post. Now, naturally, our profile and post are a bit lonely, out there in the void, so let's move forward with following our profile and collecting the post!"]
['Updated', ' ', '2 months ago', ' ']
["Alright, so we've created our Hardhat task. Now we've got to instantiate our signers (a wallet that can sign and send transactions) and begin interacting with the protocol! Our local deployment uses the default signers connected to the injected ", 'ethers', ' instance and automatically maps them to different protocol roles. ']
["For our purposes, the 0-indexed account is the deployer, the 1-indexed account is the governance address, the 2-indexed account is the treasury, and the 3-indexed account is our general-purpose user. We also need to know the addresses of our deployed contracts, so let's use ", 'fs', ' to read the addresses JSON file and store that too.']
['The following functions are ', 'not', ' in the same task file but are imported from the ', './tasks/helpers/utils.ts', " file. It's just worth noting how it works. "]
["We're just going to call the above helper functions to fetch the data we need in our task. We only want the governance and addresses object:"]
["The last thing we've got to instantiate is our interface to the contract itself, there are many ways to do this, but we're going to use our imported type chain binding, and we'll start by connecting it to our governance signer."]
["Let's add the following line inside our task's callback function:"]
["So far, we've created a new Hardhat task, instantiated our signers, and instantiated an interface to our contract. We're just about ready to start sending transactions!"]
["Before we start creating a profile, we've got a little housekeeping to do, and this will serve as a great test to see if everything's set up correctly. "]
["Upon deployment, the protocol is paused by default. Let's go ahead and unpause it by adding the following lines to our tasks' callback function:"]
['Open up an ', 'additional terminal', ' and execute the following command:']
['To clean up leftover running containers, just execute the following command:']
['Updated', ' ', '4 months ago', ' ']
["We'll need the governance signer because Lens uses a profile creator whitelist. Let's go ahead and whitelist the user; then, we can dive into the fun stuff and create our profile!"]
["We've whitelisted the user to create profiles; all that's left now is to create the profile itself. Let's first take a look at the input struct required for profile creation (from ", 'contracts/libraries/Datatypes.sol', '):']
["With that out of the way, let's go ahead and build our input struct. We want the profile NFT recipient to be ourselves (the user), our handle and URI can be mock values, and we don't want a follow module so that anyone can follow us:"]
["Lastly, we've just got to send the transaction! We will connect the ", 'lensHub', " contract instance to our user and send the transaction with the input struct provided above. We'll also include some checks, so we know it worked on the console:"]
['Create the file ', 'tasks/create-profile.ts', ' with the following code:']
["With all that done, there's just one thing left to do-- let's run the task with the following command:"]
['If all is well, we should have an output like so:']
["Congratulations! You've successfully created a profile and received a profile NFT; now, the possibilities are endless. But we're not done yet! Next up, we're going to dig into publishing a post!"]
['Updated', ' ', '5 months ago', ' ']
['Follow NFTs include built-in governance mechanisms -- any profile can spin up a DAO in minutes!']
['When following a profile, followers obtain a ', 'FollowNFT,', ' which is the core building block of the Lens Protocol social graph! From a technical perspective, these NFTs contain governance-specific logic that allows for the following:']
['Note that by default, delegation is inactive, so followers need to delegate, either to themselves or to another trusted user to partake in governance!']
["Now that's cool and all... But how do you ", 'use', ' this to build a ', 'DAO?']
['Spin up your own blockchain with Hardhat and locally deploy your own Lens Protocol!']
["Alright, so we've got two terminals running in the Docker container we're running with Docker Compose. We will be using the first one to run our local blockchain and the second one to deploy the protocol.  "]
['A quick summary as to what to expect from this guide.']
["This section walks you through creating a profile from scratch, publishing a post, following collecting, and even creating our own custom module. We'll be using ", 'ethers', ', ', 'hardhat', ', and ', 'typescript', ' to interact with the protocol.']
["We'll work with the core repository, deploy the entire protocol in a local hardhat network and write some custom tasks to interact with it. Let's start with the repository and environment setup."]
['Before You Get Started']
["You're going to need to have ", 'Git', ' and ', 'Docker Compose', ' installed on your system (this helps keep consistency between development machines and reduces OS/versioning errors!)']
['To ensure the safety of the Lens Protocol’s users and promote the development of a robust, constructive network, the protocol will be launched in a guarded manner, that is, controlled by a community multisig consisting of trusted parties throughout the Web3 ecosystem. The transition to multisig as well as the signers will be announced soon!']
['This multisig will be able to authorize the following actions: ']
['Notwithstanding its abilities, the multisig will not be able to do the following: ']
['For launch, all fees will be disabled and the following assets will be whitelisted:']
['Collects allow creators to monetize their content.  Because creators own their content via the Lens Protocol, they are able to allow their followers to purchase that content.']
['When a user posts a ', 'publication', ' to their ', 'Profile NFT', " they have the option to set a Collect Module. This module will allow other users to mint NFTs that link to the publication's ContentURI. This module can contain any arbitrary logic to apply to the minting process and the resulting NFT."]
['A creator can attach a collect module that allows collecting to be open for a certain amount of time or only allow a certain number of collects. Developers can also make their collect modules to add even more functionality!']

["Note that we're typically using a wrapper instead of just sending the transaction; this simply ensures that we wait for the transaction to be mined before proceeding. "]
['As a quick side note, the smart contract ABI (Application Binary Interface) treats enums as regular unsigned integers, which also happens with our JavaScript/typescript code; so the ', 'ProtocolState', ' enum is just a set of integers behind the scenes!']
['Create file ', 'tasks/unpause.ts', ' with the following code:']
["And now it's the moment of truth! Go ahead and run it with the following command:"]
['if things go well, we should have the following output in our terminal:']
['This is great! 2 is the value for ', 'ProtocolState.Paused', ' and 0 is the value for ', 'ProtocolState.Unpaused', '.']
['Next up, we will create a new task to whitelist the user and create our first profile!']
['Updated', ' ', '5 months ago', ' ']
["To spin up a DAO, all you've got to do is deploy a contract that interfaces with the Follow NFT's built-in functionality. It should allow for proposal creation and interface with the given profile's Follow NFTs to read governance power at the appropriate blocks for voting -- that's it!"]
['In a nutshell, a governance contract would need to handle...']
["But this is just a basic list of requirements and only scratches the surface of what's possible!"]


['Publications are the lifeblood of the Lens Protocol. They are all of the original content, comments, and mirrors produced by creators, curators, and users alike. Publications come in three primary types: posts, comments, and mirrors. Posts are the base object, with mirror and comment providing additional functionality. To learn more about ', 'Mirrors', ' and ', 'Comments', ' please go to their respective documentation pages.']
["Publications are posted directly to a user's ", 'ProfileNFTs', '; this ensures that all content created by a user remains user-owned and in their wallet. Publications are ', 'NOT', " NFT's."]
['Publications have a ContentURI which points to the specific content the publication contains, this can point to text, an image, a video, or other arbitrary content stored on either a decentralized protocol such as ', 'IPFS', ' or ', 'Arweave', ', or a centralized storage provider like AWS S3.']
['Publications also have two attached modules, a Collect Module, and a Reference Module. The ', 'Collect Module', " contains the logic that allows other users to mint your publication into an NFT. This NFT will reference the original Publication's URI. The Reference Module controls references to the publication itself. It contains the logic that determines who can ", 'comment', ' and ', 'mirror', ' the publication.']
['Updated', ' ', '3 months ago', ' ']
["Recall we're also using Hardhat, which provides a fantastic tool to spin up a local chain in mere seconds, complete with multiple mock pre-funded addresses to have fun with!"]
['CREATE 2 NEW TERMINALS WITHOUT DOCKER']
["Leave the previous terminal you used for docker alone and create 2 new terminals for running the commands. Ending up with 3 terminals in total. But remember you don't need docker for the new terminals."]
['In the ', 'first', ' terminal write:']
['This compiles everything, then spins up a custom local blockchain using Hardhat.']
['In the ', 'second', ' terminal write:']
['This executes the ', 'full-deploy', ' Hardhat task (which you can find in the ', 'tasks', " directory) on the local hardhat network. Once that's done, you should see a list of all newly deployed addresses, don't worry about jotting it down as it's also copied to an ", 'addresses.json', " file in the repository's root directory. "]
["You'll also see all the executed transactions in the first terminal if you want to see what's happening behind the scenes. "]
["On that note, so far, we've spun up our local blockchain and deployed the entire protocol to it. It's time to create a profile and start interacting with it!"]
['Updated', ' ', '5 months ago', ' ']

['Updated', ' ', '4 months ago', ' ']
['The Profile NFT is the main object in the Lens Protocol. It is ownership over this NFT that gives you control of your content. Individual addresses own ProfileNFTs, and an address can contain multiple ProfileNFTs. What differentiates the Lens Profile NFT from other on-chain identities is the ability to post ', 'Publications', ' to it. The Profile NFT contains the history of all of the posts, ', 'mirrors', ', ', 'comments', ', and other content you generate.']
['Additionally, Profile NFTs contain a ', 'FollowModule', '. This module contains the logic that allows different accounts to be issued Follow NFTs to record their relationship to the main profile on-chain.']
['Profiles can only be minted by addresses that have been whitelisted by governance. This ensures that, given the low-fee environment present on Polygon, the namespace is not reserved by squatters. If you are building an application on Lens that requires the minting of Profiles, please join the ', 'Discord', ' and get in touch!']
['Updated', ' ', '8 months ago', ' ']
['The Lens ecosystem is growing at speed 🚀']
['We’ve noticed on Social and our Discord server a few questions around similar topics so wanted to give you all an update on these']
['We have allocated some profiles to targeted communities over the last few months, and  and feedback have been amazing so far will continue to work with partners to whitelist some communities. If you see an announcement explaining how to get access from one of these communities ✅ this will be your best option for now']
['The best place to ask any dev related questions is the discord channel ', 'here', '\nHead to the developer & QA section and a team member will be able to help you! ']
['You can learn more about the Lens Protocol grants program ', 'here', '. You can apply for a grant by filling out ', 'this form', '. ']
['You can direct such queries to ', '[email\xa0protected]', ' ']
["Mirrors are the curation tool of the Lens Protocol. They are the protocol's equivalent to reposting or re-amplifying content. Mirrors are treated the same as ", 'publications', ' with a few additional checks and a few more minor features.']
["Since mirrors reference other publications, they are subject to the conditions of the original publication's Reference Module. If a publication has a reference module that limits mirrors only to accounts that follow the original poster, and the mirroring account does not hold a Follow NFT, the transaction to mirror will fail."]
['Since mirrors only repost existing content, they do not have a ContentURI field and therefore cannot be collected and do not have a Collect Module of their own. Mirrors can have their own reference module, which can define what accounts will be able to mirror or comment on the mirror.']

['Comments allow users to provide additional commentary on other publications. They are treated the same as base ', 'Publications', " with extra checks and features. Like publications, comments live in the user's ", 'Profile NFT', ' and therefore are wholly owned by the user.']
["Since comments reference other publications, they are subject to the original publication's Reference Module conditions. If a publication has a reference module that limits comments only to accounts who ", 'follow', ' the original poster, and the commenter does not hold a Follow NFT, the transaction to comment will fail.']
["Just like regular publications, comments also have Collect and Reference Modules. Collect modules define how a comment can be minted into an NFT that references the comment's ContentURI. The Reference module contains logic that determines who can comment or mirror the new comment."]

['Coming soon:']
['Updated', ' ', '10 days ago', ' ']
['We also participate, support, and host various events around the globe 🌎']
['⚒️ If you wish to build on Lens at these events our team can help get you a profile on the ground at the event']
['🤝 If you are visiting our booth or talking with our team, there is usually a POAP close by which can get you access.']
['We’re still in closed Beta, we are doing this to attain feedback and improve the experience for when we fully open to the masses']
['We are excited to get you all enjoying Lens, but we want to do it at the right time to give you the best experience possible']
["If you haven't been able to get access to Lens yet, but would like to learn more about the growing Lens ecosystem, here's an awesome ", 'article', ' from our developer relations team ']
['Head to our ', 'Lensverse', ' page to discover hundreds of applications built 🛠 on Lens Protocol ']
['In order to give everyone a fair opportunity, you will have 60 days to claim your profile once you have been whitelisted. After that period, you will lose your opportunity to claim your Lens profile.']
['Certain handles have been reserved for multiple reasons, for example, certain famous brands are limited from claiming to avoid user confusion around the ownership of those handles.']
['It is possible that certain reserved handles may be coincident with your desired lens profile. We are working on this as our plan is to reduce the amount of reserved Lens handles going forward.  ']
['Similarly as you would do with any NFT, by sending them into any other wallet or interface that supports Polygon NFTs.']
['The best way to be in touch with the community is to be active on Discord, as well as in any Lens protocol interfaces.']
['You can find Lens API ', 'here', '.']
['We do not offer formal support yet for non-UNIX based machines. You might want to try to work with WSL2 or move to UNIX based environment.']
['It depends. Users can pay their own gas fees for any transactions on the Lens Protocol. However, certain interfaces might use a relayer to allow “gas free” usage of the network for Lens Protocol transactions or may even subsidize part of the gas fees. ']
['To unfollow a profile, you either need to burn or transfer the specific follow NFT from your wallet. To burn it, send it to the address 0x00..00.']
['To do this, you will need to listen to the follow events and save them every time the action happens. You will also need to look out for each profile’s follower NFTs to see when someone unfollows (aka burns) or otherwise use the API to get it from there. ']
['You can just call createFollowTypedData and it will map it all for you. You can find an example ', 'here', '.']
['The reason profile creation is protected by an allowlist for now is to allow as many users as possible to claim the handle they would like and deter mass claiming. It also allows users to reserve certain usernames and other names they own on web3. Once everyone on the allowlist has claimed their handle and the process of claiming is more mature, it may be possible that the allowlist could be revoked to allow anyone to create a profile. ']
['Comments are linked to their publication and can have an unlimited depth of pointers. When creating a comment, it is pointed to a publication which allows the UI interface to define the structure of how these publications are shown and loaded. Each comment has reference to the pointer so you can always get back to the start recursively. ']
['To see which categories, require the auth token, visit Lens protocol docs ', 'here', ' to see at the top whether it is required or not. ']
['Any Ethereum address can post publications. Therefore, a contract can post if they own the profile. There is a feature on the contracts called “dispatcher” which allows you to put an Ethereum address on the allowlist which then enables that address to post publications and perform other actions on behalf of the owner. ']
['useUnreadNotificationsCount', ' is a React Hook that let you know the the number of unread notifications.']
['Updated', ' ', '9 days ago', ' ']
['useNotifications', ' is a React Hook used to get all notifications for the authenticated user.']
['useCurrencies', ' is a React Hook that returns the list of ERC20 supported by the Lens Protocol.']
['When configuring ', 'Collect Modules', ' and ', 'Follow Modules', ' that involve a fee you need to specify an amount which requires to specify the corresponding ERC20 accepted as fee.']
['The Lens SDK abstracts away these details and all it asks in its input data are instances of an ', 'Amount', ' class. To instantiate an ', 'Amount', ' you need to provide a string with the amount (as human readable string) and a reference to the correct ', 'Erc20', ' which is a type that encapsulates currency details (ERC20 included).']
['When invoked the ', 'useCurrencies', ' hook interrogates the Lens API to retrieve the list of supported ERC20s and returns a list of ', 'Erc20', '.']
['You can call ', 'useCurrencies', ' to populate for example a drop-down that let the user select which currency to use to configure a fee.']
['Updated', ' ', '9 days ago', ' ']
['Coming soon:']
['Updated', ' ', '9 days ago', ' ']
['useFeed', ' is a React Hook that lets you fetch the feed of a given profile.']
['profileId: string', ' (required)']
['observerId: string', ' (optional)']
['limit: number', ' (optional)']
['Updated', ' ', '9 days ago', ' ']
['Coming soon:']
['useComments', ' is a React Hook that lets you query the comments for a given publication.']
['commentsOf: string', ' (required)']
['observerId: string', ' (optional)']
['limit: number', ' (optional)']
['Updated', ' ', '9 days ago', ' ']
['However, you can always send any inquiries regarding integrations, partnerships and so on to ', '[email\xa0protected]']
['Sure, the Lens Protocol Discord link can be found ', 'here', '.']
['Please take into account that there are some users impersonating admins. Please note, that admins will never DM you first or share any business opportunities, or ask you for favours, your seed phrase, funds, etc.']
['Updated', ' ', 'about 1 month ago', ' ']
['Yes, you need to provide a publication ID but this will be specific to your profile. For example, your first publication might be id 1, second id 2, etc. ']
['For testing purposes you can, and it is highly encouraged to use the Lens testnet deployment on Mumbai. You can also deploy your own version locally or on whichever testnet or mainnet you prefer, but if you do so, there won’t be API support.']
['Mirrors are the Lens equivalent to reposting or re-amplifying exisiting content. For example, if Karen sees Chad\'s post and wants to repost it, this action is called a "mirroring" on Lens. You can store additional data to the post you are mirroring, meaning you can also provide commentary. For example, if Karen mirrors Chad\'s post, she can also add to the post by herself adding "Love this post, Chad!"']
['The possibilities of building on top of Lens are infinite and whilst the chances of duplicate applications being built are there, each will have its own unique metric. Just make sure you do not infringe on anyone else’s IP when you’re building.']
['Not necessarily; it depends on the logic of the collect module.']
['No, it is not possible to edit publications directly. However, If the content URI points to some editable storage, then you can edit publications via updating what the URI returns.']
['Profile NFTs are resolved for you with on-chain svgs; you cannot set your own profile NFT as handles (usernames). Your profile picture is taken from the image set into the NFT. ']
['Yes, Lens is a protocol that defines how social content can be relational on chain. Any form of content—text, audio, or video—can be used with Lens Protocol. ']
['This error means that the handle you are requesting is already in use for another profile and you will need to request a different one. All handles are unique and cannot be duplicated. ']
['You can do this by using the API call “get profile” and filtering by “owned by”. Find more details on this ', 'here', '.']
['useCollectedPublications', ' is a React Hook that lets you query for all publications collected by a wallet address.']
['profileId: string', ' (required)']
['limit: number', ' (optional)']
['Updated', ' ', '5 days ago', ' ']
['Updated', ' ', '9 days ago', ' ']
['The protocol has capacity to take fees, but this is currently disabled. ']
['It is required to conform to the metadata standards if you wish to use the API and have common ground with the UIs, you can find out more about this standard ', 'here', '. The standard outlined allows the publication NFTs to be supported on Open Sea and other marketplaces. That said, the protocol has no constraints on this standard so if you wanted to set your own standard that is fine. However, if you do this, it may not work on other UIs and may also not be compatible with the API, therefore it is heavily advised that you use our standards for compatibility across all Dapps. ']
['No, in Lens Protocol the specific wallet is the one following profiles and holding the Follow NFTs that represent this. The follow interaction is not based on a profile but on a specific wallet. Other interactions such as posts, mirrors, and comments will be performed by profiles.']
['Because an address can hold multiple profiles and there are address-based interactions such as follow or collect, the default profile variable allows the owner to select one profile as its default. This gives interfaces the ability to shape how such interactions are displayed based on the default profile rather than just an address. For example, a profile may want to display the interaction of Alice following Bob rather than Alice’s address which followed Bob. You can use the set default profile function to choose a new profile to interact with by default. To do this, view the code for the specific command ', 'here', '.']
['It isn’t possible to change the core protocol, but you can create follow, reference, and collect modules and even extend the protocol by building contracts on top of it. ']
['It depends on how the collect module set for the publication has been built. For example, one collect module could let the publisher decide which address or addresses will receive the fees, but another could have a fixed fee recipient or other logic.']
['Lens Protocol is agnostic of the content storage; it can be stored on decentralized, immutable solutions such as IPFS or in centralized services, depending on the use case. In the future, this could open room for the possibility of hosting content in a storage service that has not yet been invented!']
['Updated', ' ', 'about 1 month ago', ' ']
['walletAddress: string', ' (required)']
['limit: number', ' (optional)']
['Updated', ' ', '9 days ago', ' ']






